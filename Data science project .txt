read data
------------------------------------
from google.colab import files
import io
# Upload the dataset file
uploaded = files.upload()
for file_name, file_content in uploaded.items():
    print(f"Filename: {file_name}")
    df = pd.read_csv(io.BytesIO(file_content))
    print(df)
----------------------------------------
clean data
--------------------------------------
df = df.drop(columns=['CustomerId'])
df = df.drop(columns=['Surname'])
print(df)
------------------------------------------
split data
---------------------------------------------
from sklearn.model_selection import train_test_split
X = df[['CreditScore', 'Age', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']]
y = df['Exited']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=25)
--------------------------------------------------------------------------------------------------
cnn model 
----------------------------------------------------------------------------------------------------
from keras.models import Sequential
from keras.layers import Dense, Conv1D, MaxPooling1D, Flatten, Dropout
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler


# Build the CNN model
model = Sequential()
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train_cnn, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
y_pred = (model.predict(X_test_cnn) > 0.5).astype(int)
accuracy = accuracy_score(y_test, y_pred)

print(f'Test Accuracy: {accuracy * 100:.2f}%')
-------------------------------------------------------------------------------------------
RNN model 
------------------------------------------------------------------------------------------
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import SimpleRNN, Dense


# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Reshape the input data for the RNN
X_train_rnn = X_train_scaled.reshape(X_train_scaled.shape[0], X_train_scaled.shape[1], 1)
X_test_rnn = X_test_scaled.reshape(X_test_scaled.shape[0], X_test_scaled.shape[1], 1)

# Build the RNN model
model = Sequential()
model.add(SimpleRNN(64, activation='relu', input_shape=(X_train_scaled.shape[1], 1)))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train_rnn, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
accuracy = model.evaluate(X_test_rnn, y_test)[1]

print(f'Test Accuracy: {accuracy * 100:.2f}%')
---------------------------------------------------------------------------------------------
decision tree
---------------------------------------------------------------------------------------------
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

print("Decision Tree :")
df_model = DecisionTreeClassifier(criterion='gini',max_depth=7,random_state=0)
p1=df_model.fit(X_train, y_train)
predict_y = df_model.predict(X_test)
acc2 = accuracy_score(y_test, predict_y)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
print("Accuracy: %.3f" % (acc2*100))
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', class_report)
------------------------------------------------------------------------------------------------
randomforest
------------------------------------------------------------------------------------------------
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Initialize and train the Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=25, max_depth=7)  # Adjust parameters as needed
rf_classifier.fit(X_train, y_train)

# Make predictions on the testing data
predictions = rf_classifier.predict(X_test)
print(predictions)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
print(f"Accuracy on test set: {accuracy * 100:.2f}%")
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', class_report)
-------------------------------------------------------------------------------------------------------
xgboost
------------------------------------------------------------------------------------------------------
import pandas as pd
import xgboost as xgb
from sklearn.metrics import accuracy_score, confusion_matrix

# Define the XGBoost classifier
xgb_model = xgb.XGBClassifier()

# Train the model
xgb_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = xgb_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
confusion_mat = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Confusion Matrix:", confusion_mat)
print('Classification Report:\n', class_report)
--------------------------------------------------------------------------------------------------------
SVM
-----------------------------------------------------------------------------------------------------------
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import make_pipeline
print("SVM :")
clf1 = make_pipeline(StandardScaler(), svm.SVC(kernel='linear'))
p=clf1.fit(X_train,y_train)
y_pred = clf1.predict(X_test)
acc1 = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
print("Accuracy: %.3f"% (acc1*100))
print('Confusion Matrix:\n', conf_matrix)
print('Classification Report:\n', class_report)
